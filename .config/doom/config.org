#+startup: overview
* Setup
#+begin_src emacs-lisp
;; Plac your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Wacken Desktop Arch"
      user-mail-address "wackenmail@gmail.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))
(setq doom-font (font-spec :family "Fira Code" :size 16)
      doom-variable-pitch-font (font-spec :family "FreeSans"))
;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-dracula)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/Files/Org")

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type 'relative)

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.

;; (use-package! evil-cleverparens
;;   :ghook 'prog-mode-hook)

#+end_src
* keybindings
** general
*** doom
#+begin_src emacs-lisp
(map!
 :leader
 :desc "M-x" "SPC" 'counsel-M-x

 "wa"              'ace-window
 "ws"              'ace-swap-window
 "wc"              'ace-delete-window
 )
#+end_src

*** !setup
#+begin_src emacs-lisp
;; (defconst my-leader "spc")
;; (defconst my-major "spc m")
;; (general-create-definer my-leader-def
;;   :states '(normal visual insert emacs motion)
;;   :prefix my-leader
;;   :keymaps 'override
;;   :non-normal-prefix (concat "s-" my-leader))
;; (general-create-definer my-major-def
;;   :states '(normal visual insert emacs motion)
;;   :prefix my-major
;;   :keymaps 'override
;;   :non-normal-prefix (concat "s-" my-major))
#+end_src

** evil
*** !setup
 #+begin_src emacs-lisp
     (setq evil-emacs-state-modes nil)
     ;; don't put into normal mode in repl (setq evil-insert-state-modes nil)
     (setq evil-motion-state-modes nil)
 #+end_src

** which-key
 #+begin_src emacs-lisp
(use-package! which-key
  :config
  (setq which-key-idle-delay 1
        which-key-show-operator-state-maps t))
 #+end_src

* navigation
** +dired
# *** setup
# dired multiple windows and other defaults
# #+begin_src emacs-lisp
#   (setq dired-dwim-target t
#         dired-hide-details-hide-symlink-targets nil
#         image-dired-thumb-size 150
#         dired-recursive-copies 'always)
#   ;; (setq dired-omit-verbose nil
#   ;;       dired-omit-files
#   ;;         (concat dired-omit-files
#   ;;                 "\\|^.ds_store\\'"
#   ;;                 "\\|^.project\\(?:ile\\)?\\'"
#   ;;                 "\\|^.\\(svn\\|git\\)\\'"
#   ;;                 "\\|^.ccls-cache\\'"
#   ;;                 "\\|\\(?:\\.js\\)?\\.meta\\'"
#   ;;                 "\\|\\.\\(?:elc\\|o\\|pyo\\|swp\\|class\\)\\'"))
#   ;; (add-hook 'dired-mode-hook #'dired-omit-mode)
# #+end_src

# *** dfl
# some more colour
# #+begin_src emacs-lisp
#   (use-package diredfl
#     :ensure t
#     :config
#     (diredfl-global-mode))
# #+end_src

# *** rsync
# #+begin_src emacs-lisp
#   (use-package dired-rsync
#     :ensure t
#     :general
#     (dired-mode-map
#      "c-c s" 'dired-rsync))
# #+end_src

# *** all-the-icons
# todo: change off before wdired mode
# #+begin_src emacs-lisp
#   ;; (use-package all-the-icons-dired
#   ;;   :ensure t
#   ;;   :hook (dired-mode . all-the-icons-dired-mode)
#   ;;   :config
#   ;;   (add-hook 'wdired-mode-hook '(lambda () (all-the-icons-dired-mode -1))))
# #+end_src

# *** dired-x
# #+begin_src emacs-lisp
#   ;; (add-hook 'dired-load-hook
#   ;;             (function (lambda () (load "dired-x"))))
# #+end_src

** +counsel/swiper/ivy
# *** counsel
#  #+begin_src emacs-lisp
#    (use-package counsel
#      :diminish (ivy-mode counsel-mode)
#      :ensure t
#      :config
#      (ivy-mode)
#      (counsel-mode)
#      (setq ivy-height 20
#            projectile-completion-system 'ivy
#            ivy-wrap t
#            ivy-use-selectable-prompt t)
#      (setq ivy-count-format "[%d/%d]")
#      (setq ivy-use-virtual-buffers t)
#      (setq enable-recursive-minibuffers t)
#      (setq search-default-mode #'char-fold-to-regexp)
#      (setq ivy-sort-max-size 7500))
#    (global-set-key (kbd "c-c c-r") 'ivy-resume)
#    (global-set-key (kbd "<f6>") 'ivy-resume)
#    (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
#    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
#    (global-set-key (kbd "c-c g") 'counsel-git)
#    (global-set-key (kbd "c-c j") 'counsel-git-grep)
#    (global-set-key (kbd "c-c k") 'counsel-ag)
#    (global-set-key (kbd "c-x l") 'counsel-locate)
#    (global-set-key (kbd "c-s-o") 'counsel-rhythmbox)
#    (define-key minibuffer-local-map
#      (kbd "c-r") 'counsel-minibuffer-history)
#    (use-package swiper
#      :ensure t)

#  #+end_src

# *** prescient (recently used ivy)
#  #+begin_src emacs-lisp
#    (use-package ivy-prescient
#      :after counsel
#      :ensure t
#      :config
#      (setq ivy-prescient-retain-classic-highlighting t)
#      (prescient-persist-mode)
#      (ivy-prescient-mode))
#  #+end_src

# *** ivy-rich (help for m-x)
# #+begin_src emacs-lisp
#   (use-package ivy-rich
#     :after ivy
#     :ensure t
#     :config
#     (plist-put! ivy-rich-display-transformers-list
#                 'counsel-describe-variable
#                 '(:columns
#                   ((counsel-describe-variable-transformer (:width 40)) ; the original transformer
#                    (+ivy-rich-describe-variable-transformer (:width 50)) ; display variable value
#                    (ivy-rich-counsel-variable-docstring (:face font-lock-doc-face))))
#                 'counsel-m-x
#                 '(:columns
#                   ((counsel-m-x-transformer (:width 60))
#                    (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))
#                 ;; apply switch buffer transformers to `counsel-projectile-switch-to-buffer' as well
#                 'counsel-projectile-switch-to-buffer
#                 (plist-get ivy-rich-display-transformers-list 'ivy-switch-buffer)
#                 'counsel-bookmark
#                 '(:columns
#                   ((ivy-rich-candidate (:width 0.5))
#                    (ivy-rich-bookmark-filename (:width 60)))))
#     (ivy-rich-mode +1))
# #+end_src

# *** all-the-icons-ivy
# #+begin_src emacs-lisp
#   (use-package all-the-icons-ivy
#     :ensure t
#     :after ivy
#     :config (all-the-icons-ivy-setup))
# #+end_src

** +ibuffer
#+begin_src emacs-lisp
  ;; (setq ibuffer-saved-filter-groups
  ;;       (quote (("default"
  ;;                ("dired" (mode . dired-mode))
  ;;                ("org" (name . "^.*org$"))
  ;;                ("web" (or (mode . web-mode) (mode . js2-mode)))
  ;;                ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
  ;;                ("mu4e" (name . "\*mu4e\*"))
  ;;                ("elfeed" (name . "\*elfeed\*"))
  ;;                ("programming" (or
  ;;                                (mode . python-mode)
  ;;                                (mode . c++-mode)
  ;;                                (mode . clojure-mode)
  ;;                                (mode . csharp-mode)
  ;;                                (mode . haskell-mode)))
  ;;                ("emacs" (or
  ;;                          (name . "^\\*scratch\\*$")
  ;;                          (name . "^\\*messages\\*$")
  ;;                          (name . "^\\*dashboard\\*$")))))))

  ;; (add-hook 'ibuffer-mode-hook
  ;;           (lambda ()
  ;;             (ibuffer-auto-mode)
  ;;             (ibuffer-switch-to-saved-filter-groups "default")))

  ;; ;; don't show these
  ;; ;(add-to-list 'ibuffer-never-show-predicates "zowie")
  ;; ;; don't show filter groups if there are no buffers in that group
  ;; (setq ibuffer-show-empty-filter-groups nil)

  ;; ;; don't ask for confirmation to delete marked buffers
  ;; (setq ibuffer-expert t)
#+end_src

** ace window
#+begin_src emacs-lisp
(use-package! ace-window
  :config
  (setq aw-keys '(?a ?o ?e ?u ?i ?d ?h ?t ?n ?s))
  (custom-set-faces!
     '(aw-leading-char-face
       :inherit ace-jump-face-foreground :height 3.0
       :foreground "red")))
#+end_src

** +projectile
# *** setup
# #+begin_src emacs-lisp
#   (use-package projectile
#     :ensure t
#     :config
#     (projectile-global-mode)
#     (setq projectile-completion-system 'ivy)
#     :general
#     (my-leader-def
#       "p" '(:ignore t :which-key "project")
#       "ps" 'projectile-toggle-between-implementation-and-test))
# #+end_src

# *** counsel
# #+begin_src emacs-lisp
#   (use-package counsel-projectile
#     :ensure t
#     :config
#     (counsel-projectile-mode))
# #+end_src

** +dumb-jump
#+begin_src emacs-lisp
;; (use-package dumb-jump
;;   :ensure t
;;   :config
;;   (dumb-jump-mode)
;;   (setq dumb-jump-selector 'ivy))
#+end_src

** -persp-mode
#+begin_src emacs-lisp
  ;; (use-package persp-mode
  ;;   :ensure t
  ;;   :config
  ;;   (persp-mode)
  ;;   (setq persp-auto-resume-time -1))
#+end_src

* texteditor
** +lines
#+begin_src emacs-lisp
;; (setq default-fill-column 80)    ; toggle wrapping text at the 80th character
;; (add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)
;; (setq display-line-numbers-type 'relative)
;; (add-hook 'prog-mode-hook #'display-line-numbers-mode)
;; (add-hook 'text-mode-hook #'display-line-numbers-mode)
;; (add-hook 'org-mode-hook #'display-line-numbers-mode)
;; (global-hl-line-mode)
#+end_src

** cursor
#+begin_src emacs-lisp
(setq evil-normal-state-cursor  '(box       "#c792ea")
      evil-insert-state-cursor  '((bar . 2) "#c792ea")
      evil-visual-state-cursor  '(box       "yellow")
      evil-emacs-state-cursor   '((bar . 4) "#6785c6")
      evil-replace-state-cursor '(hbar      "orange"))
#+end_src

** -beacon
#+begin_src emacs-lisp
  ;; (use-package beacon
  ;;   :ensure t
  ;;   :diminish beacon-mode
  ;;   :config
  ;;   (beacon-mode))
#+end_src

* code-transform
** +expand-region
#+begin_src emacs-lisp
;; (use-package expand-region
;;   :ensure t
;;   :general
;;   (:states '(visual motion)
;;    "c-+" 'er/expand-region
;;    "c--" 'er/contract-region))
#+end_src

** +iedit
#+begin_src emacs-lisp
;; (use-package iedit
;;   :ensure t)
#+end_src

** -hungry-delete
#+begin_src emacs-lisp
  ;; (use-package hungry-delete
  ;;   :ensure t
  ;;   :diminish hungry-delete-mode
  ;;   :ghook ('(python-mode-hook
  ;;             csharp-mode-hook
  ;;             c++-mode-hook
  ;;             haskell-mode-hook)))
#+end_src

** +lispy
# *** setup
# #+begin_src emacs-lisp
#   (use-package lispy
#     :ensure t
#     :ghook ('(emacs-lisp-mode-hook
#               clojure-mode-hook
#               cider-repl-mode-hook
#               ;; python-mode-hook
#               ))
#     :general
#     (:states '(normal insert motion emacs visual)
#              "c-d" 'lispy-delete)
#     :config
#     (setq lispy-compat t))
# #+end_src

# *** lispyville
# #+begin_src emacs-lisp
#   (use-package lispyville
#     :ensure t
#     :ghook ('(emacs-lisp-mode-hook
#               clojure-mode-hook)))
# #+end_src

** +agressive-indent
#+begin_src emacs-lisp
;; (use-package aggressive-indent
;;   :ensure t
;;   :ghook ('(;; python-mode-hook
;;             csharp-mode-hook
;;             c++-mode-hook
;;             haskell-mode-hook)))
;; ;; (add-to-list 'aggressive-indent-excluded-modes 'html-mode)
#+end_src

** -paredit
#+begin_src emacs-lisp
  ;; (use-package paredit
  ;;   :ensure t)
#+end_src

** -smartparens
#+begin_src emacs-lisp
  ;; (use-package smartparens
  ;;   :ensure t
  ;;   :config
  ;;   (smartparens-global-mode)
  ;;   (smartparens-global-strict-mode))
#+end_src

** -parinfer
 #+begin_src emacs-lisp
   ;; (use-package parinfer
   ;;   :ensure t
   ;;   :hook
   ;;   (clojure-mode . parinfer-mode)
   ;;   (emacs-lisp-mode . parinfer-mode)
   ;;   :general
   ;;   ("c-," 'parinfer-toggle-mode)
   ;;   :init
   ;;   (setq parinfer-extensions '(defaults       ; should be included.
   ;;                                pretty-parens  ; different paren styles for different modes.
   ;;                                evil)))
   ;;                                ;; lispy          ; if you use lispy. with this extension, you should install lispy and do not enable lispy-mode directly.
   ;;                                ;; paredit)))        ; introduce some paredit commands.
   ;;                                ;; smart-tab)))      ; c-b & c-f jump positions and smart shift with tab & s-tab.
   ;;                                ;; smart-yank)))  ; yank behavior depend on mode.
 #+end_src

* languages
** +tools
*** +flycheck
#+begin_src emacs-lisp
;; (use-package flycheck
;;   :ensure t
;;   :ghook
;;   'prog-mode-hook
;;   :config
;;   (setq flycheck-check-syntax-automatically
;;         '(save mode-enabled idle-buffer-switch))
;;   (setq flycheck-buffer-switch-check-intermediate-buffers t)
;;   (setq flycheck-display-errors-delay 0.25))
;; (use-package flycheck-pos-tip
;;   :ensure t
;;   :after flycheck)
#+end_src

*** +completion
**** setup
#+begin_src emacs-lisp
;; (use-package company
;;   :ensure t
;;   :diminish company-mode
;;   :ghook ('(prog-mode-hook
;;             text-mode-hook
;;             cider-repl-mode-hook))
;;   :config
;;   (setq company-idle-delay 0.2
;;         company-minimum-prefix-length 2
;;         company-tooltip-limit 14
;;         company-tooltip-align-annotations t
;;         company-require-match 'never
;;         company-frontends '(company-pseudo-tooltip-frontend
;;                             company-echo-metadata-frontend)
;;         company-auto-complete nil
;;         company-auto-complete-chars nil)
;;   (add-to-list 'company-backends 'company-omnisharp)
;;   (company-tng-configure-default))
#+end_src

**** quickhelp
#+begin_src emacs-lisp
;; (use-package company-quickhelp
;;   :ensure t
;;   :config
;;   (company-quickhelp-mode))
#+end_src

**** box
doesn't work with tng (tab completion) configuration
#+begin_src emacs-lisp
;; (use-package company-box
;;   :diminish company-box-mode
;;   :ensure t
;;   :hook (company-mode . company-box-mode))
#+end_src

**** statistics
#+begin_src emacs-lisp
;; (use-package company-statistics
;;   :ensure t
;;   :ghook 'company-mode-hook)
#+end_src

*** +yasnippets
**** setup
#+begin_src emacs-lisp
;; (use-package yasnippet
;;   :ensure t
;;   :config
;;   (yas-global-mode))
#+end_src

**** snippets
#+begin_src emacs-lisp
;; (use-package yasnippet-snippets
;;   :ensure t)
#+end_src

** +c#
*** setup
#+begin_src emacs-lisp
;; (use-package omnisharp
;;   :ensure t
;;   :ghook 'csharp-mode-hook)
#+end_src

*** repl
#+begin_src emacs-lisp
;; (defun my-csharp-repl ()
;;   "switch to the csharprepl buffer, creating it if necessary."
;;   (interactive)
;;   (if-let ((buf (get-buffer "*csharprepl*")))
;;       (pop-to-buffer buf)
;;     (when-let ((b (make-comint "csharprepl" "csharp")))
;;       (switch-to-buffer-other-window b))))
;; ;; (define-key csharp-mode-map (kbd "c-c c-z") 'my-csharp-repl)
#+end_src

** +clojure
*** cider
#+begin_src emacs-lisp
;; (use-package cider
;;   :ensure t
;;   :config
;;   (setq
;;    cider-repl-history-file ".cider-repl-history"  ;; not squiggly-related, but i like it
;;    nrepl-log-messages t)                          ;; not necessary, but useful for trouble-shooting
;;   :general
;;   (my-major-def clojure-mode-map
;;                 "j" 'cider-jack-in
;;                 "l" 'cider-load-buffer-and-switch-to-repl-buffer))
#+end_src

*** refactor
#+begin_src emacs-lisp
;; (use-package clj-refactor
;;   :ensure t
;;   :ghook 'clojure-mod-hook
;;   :general
;;   (my-major-def clojure-mode-map
;;                 "r" 'hydra-cljr-help-menu/body))
#+end_src

*** flycheck
#+begin_src emacs-lisp
;; (use-package flycheck-clj-kondo
;;   :ensure t
;;   :config
;;   (eval-after-load 'flycheck
;;     '(setq flycheck-display-errors-function
;;            #'flycheck-pos-tip-error-messages)))
#+end_src

*** hydra
#+begin_src emacs-lisp
;; (use-package cider-hydra
;;   :ensure t
;;   :ghook 'clojure-mode-hook)
#+end_src

** +python
#+begin_src emacs-lisp
;; (use-package jedi
;;   :ensure t
;;   :init
;;   (add-hook 'python-mode-hook 'jedi:setup)
;;   (add-hook 'python-mode-hook 'jedi:ac-setup))
#+end_src

** +org
*** setup
#+begin_src emacs-lisp
;; (custom-set-variables
;;  '(org-directory "~/files/org")
;;  '(org-startup-folded 'overview)
;;  '(org-startup-indented t))
;; (setq org-file-apps
;;       (append
;;        '(("\\.pdf\\'" . "zathura %s"))
;;        org-file-apps))
;; (setq org-agenda-files
;;       '("~/files/org/gcal.org"
;;         "~/files/org/i.org"))
#+end_src

*** bullets
#+begin_src emacs-lisp
;; (use-package org-bullets
;;   :ensure t
;;   :init
;;   (setq org-bullets-bullet-list
;;         '("▶" "✚" "●" "◆" "◇"))
;;   :ghook 'org-mode-hook)
#+end_src

** +c++
#+begin_src emacs-lisp
;; (use-package ggtags
;;   :ensure t
;;   :config
;;   (add-hook 'c-mode-common-hook
;;             (lambda ()
;;               (when
;;                   (derived-mode-p 'c-mode 'c++-mode 'java-mode)
;;                 (ggtags-mode 1)))))

#+end_src

* ui
** +themes
#+begin_src emacs-lisp
;; (use-package! doom-themes
;;   :config
;;   ;; global settings (defaults)
;;   (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
;;         doom-themes-enable-italic t) ; if nil, italics is universally disabled
;;   (load-theme 'doom-palenight t)

;;   ;; enable flashing mode-line on errors
;;   (doom-themes-visual-bell-config)

;;   ;; enable custom neotree theme (all-the-icons must be installed!)
;;   (doom-themes-neotree-config)
;;   ;; or for treemacs users
;;   (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
;;   (doom-themes-treemacs-config)

;;   ;; corrects (and improves) org-mode's native fontification.
;;   (doom-themes-org-config))
(custom-theme-set-faces! 'doom-dracula
  `(markdown-code-face :background ,(doom-darken 'bg 0.075))
  `(font-lock-variable-name-face :foreground ,(doom-lighten 'magenta 0.6)))
#+end_src

** +modeline
#+begin_src emacs-lisp
;; (use-package doom-modeline
;;   :config
;;   (setq doom-modeline-minor-modes t)
;;   (setq doom-modeline-buffer-encoding nil)
;;   (column-number-mode)
;;   (when (daemonp)
;;     (setq doom-modeline-icon t)))
#+end_src

** +font
#+begin_src emacs-lisp
;; (use-package! fira-code-mode
;;   :ghook 'prog-mode-hook)
#+end_src

** +dashboard
#+begin_src emacs-lisp
;; (use-package dashboard
;;   :ensure t
;;   :config
;;   (dashboard-setup-startup-hook)
;;   (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
;;   (setq dashboard-startup-banner "/data/googledrive/pictures/profilbild/wacken logo.png")
;;   (setq dashboard-show-shortcuts nil)
;;   (setq dashboard-items '((recents  . 5)
;;                           (bookmarks . 5)
;;                           (projects . 5)
;;                           (agenda . 5)
;;                           (registers . 5)))
;;   (setq dashboard-set-heading-icons t)
;;   (setq dashboard-set-file-icons t))
#+end_src

* other
** elfeed
*** goodies
#+begin_src emacs-lisp
(use-package! elfeed-goodies
  :config
  (elfeed-goodies/setup))
#+end_src
