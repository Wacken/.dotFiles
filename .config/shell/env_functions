#!/bin/bash

# =============================================================================
# Shell Environment Helper Functions
# =============================================================================

# indirect_expand: Get the value of an environment variable by name
# -----------------------------------------------------------------------------
# Args:
#   $1: Name of the environment variable to expand
# Returns:
#   The value of the environment variable
# Example:
#   indirect_expand PATH -> $PATH
indirect_expand() {
    env | sed -n "s/^$1=//p"
}

# pathremove: Remove a directory from a PATH-like variable
# -----------------------------------------------------------------------------
# Args:
#   $1: Directory to remove from path
#   $2: (Optional) Name of the PATH-like variable (defaults to PATH)
# Example:
#   pathremove ~/bin PATH
pathremove() {
    local IFS=':'
    local newpath
    local dir
    local var=${2:-PATH}
    
    # Iterate through current paths and rebuild without the target dir
    for dir in $(indirect_expand "$var"); do
        IFS=''
        if [ "$dir" != "$1" ]; then
            newpath=$newpath:$dir
        fi
    done
    export "$var"="${newpath#:}"
}

# pathprepend: Add a directory to the beginning of a PATH-like variable
# -----------------------------------------------------------------------------
# Args:
#   $1: Directory to prepend to path
#   $2: (Optional) Name of the PATH-like variable (defaults to PATH)
# Example:
#   pathprepend ~/bin PATH
pathprepend() {
    # Remove the path if it already exists to avoid duplication
    pathremove "$1" "$2"
    local var="${2:-PATH}"
    local value
    value=$(indirect_expand "$var")
    export "${var}"="${1}${value:+:${value}}"
}

# pathappend: Add a directory to the end of a PATH-like variable
# -----------------------------------------------------------------------------
# Args:
#   $1: Directory to append to path
#   $2: (Optional) Name of the PATH-like variable (defaults to PATH)
# Example:
#   pathappend ~/bin PATH
pathappend() {
    # Remove the path if it already exists to avoid duplication
    pathremove "${1}" "${2}"
    local var=${2:-PATH}
    local value
    value=$(indirect_expand "$var")
    export "$var"="${value:+${value}:}${1}"
}

# ssource: Safely source a file if it exists
# -----------------------------------------------------------------------------
# Args:
#   $1: Path to the file to source
# Example:
#   ssource ~/.config/shell/local_config
ssource() {
    if [ -r "$1" ]; then
        . "$1"
    fi
}

# expandHOME: Expand a path relative to HOME and return as text
# -----------------------------------------------------------------------------
# Args:
#   $1: Path relative to HOME to expand
# Returns:
#   The absolute path with $HOME expanded
# Example:
#   expandHOME ".config/shell" -> "/home/user/.config/shell"
expandHOME() {
    du "$HOME/$1" | cut -f2 | tr -d '\n'
}
