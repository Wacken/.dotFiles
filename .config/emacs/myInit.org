#+STARTUP: overview
* Setup
** constants
 #+BEGIN_SRC emacs-lisp
   (defconst emacs-config-path "~/.config/emacs/")
 #+END_SRC
** sensible defaults
 #+BEGIN_SRC emacs-lisp
   (setq byte-compile-warnings '(cl-functions)) ; ignore Package cl is depcrecated warning
   (setq delete-old-versions -1)    ; delete excess backup versions silently
   (setq version-control t)    ; use version control
   (setq vc-make-backup-files t)    ; make backups file even when in version controlled dir
   (setq backup-directory-alist
         `(("." . ,(concat emacs-config-path "backups")))) ; which directory to put backups file
   (setq vc-follow-symlinks t)               ; don't ask for confirmation when opening symlinked file
   (setq auto-save-file-name-transforms
         `((".*" ,(concat emacs-config-path "auto-save-list/") t))) ;transform backups file name
   (setq inhibit-startup-screen t)  ; inhibit useless and old-school startup screen
   (setq ring-bell-function 'ignore)  ; silent bell when you make a mistake
   (setq coding-system-for-read 'utf-8)  ; use utf-8 by default
   (setq coding-system-for-write 'utf-8)
   (setq sentence-end-double-space nil)  ; sentence SHOULD end with only a point.
   (global-auto-revert-mode)
   (setq auto-revert-verbose nil)
   (setq recentf-max-saved-items nil)
   (setq save-interprogram-paste-before-kill t)
   (setq default-fill-column 80)    ; toggle wrapping text at the 80th character
   (add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)
   (setq initial-scratch-message "Welcome in Emacs") 
   (setq inhibit-startup-message t)
   (setq menu-bar-mode nil)
   (setq display-line-numbers-type 'relative)
   (add-hook 'prog-mode-hook #'display-line-numbers-mode)
   (add-hook 'text-mode-hook #'display-line-numbers-mode)
   (add-hook 'org-mode-hook #'display-line-numbers-mode)
   ;; (add-hook 'ansi-term
   ;;           (lambda ()
   ;;             (interactive)
   ;;             (setq global-display-line-numbers-mode nil)))
   (global-hl-line-mode)
   (setq blink-cursor-mode nil)
   (setq scroll-bar-mode nil)
   (setq tool-bar-mode nil)
   (fset 'yes-or-no-p 'y-or-n-p) ; instead af yes or no type onl y or p
   (defalias 'list-buffers 'ibuffer)
 #+END_SRC
 
** auto-update-packages
#+BEGIN_SRC emacs-lisp
  (use-package auto-package-update
    :ensure t
    :config
    (setq auto-package-update-delete-old-versions t)
    (setq auto-package-update-hide-results t)
    (auto-package-update-maybe))
#+END_SRC

* keybindings
  bindings with general.el
** setup
#+BEGIN_SRC emacs-lisp
  (use-package general :ensure t)

  (defconst my-leader "SPC")
  (general-create-definer my-leader-def
    :prefix my-leader
    :keymaps 'override
    :non-normal-prefix (concat "S-" my-leader))
#+END_SRC

** simple commands
#+BEGIN_SRC emacs-lisp
  (my-leader-def
    :states '(normal visual insert emacs)
    "." 'counsel-find-file
    "SPC" 'counsel-M-x
    "RET" 'counsel-bookmark)
  (general-define-key
   :states '(normal visual insert emacs)
   "<f5>" 'revert-buffer
   "M-y" 'counsel-yank-pop)
  (general-define-key
   :states '(normal visual)
   "gs" 'avy-goto-char-timer
   "/" 'swiper
   "C-+" 'er/expand-region
   "C--" 'er/contract-region)
  (general-define-key
   :keymaps '(elfeed-search-mode-map elfeed-show-mode-map)
   :states '(normal visual)
   "SPC" nil)
  ;; (general-define-key
  ;;  :states '(insert emacs)
  ;;  :keymaps 'yas-minor-mode-map
  ;;  "SPC" 'yas-maybe-expand)
#+END_SRC

** buffers
#+BEGIN_SRC emacs-lisp
  (my-leader-def
    :states '(normal visual insert emacs)
    "b" '(:ignore t :which-key "buffers")
    "bl" 'list-buffers
    "bs" 'switch-to-buffer
    "bc" 'kill-current-buffer)
#+END_SRC

** files
#+BEGIN_SRC emacs-lisp
  (my-leader-def
     :states '(normal visual insert emacs)
     "f" '(:ignore t :which-key "files")
     "ff" 'counsel-find-file
     "fs" 'save-buffer
     "fr" 'counsel-recentf
     )
#+END_SRC

** window
#+BEGIN_SRC emacs-lisp
  (my-leader-def
    :states '(normal visual insert emacs)
    "w" '(:ignore t :which-key "windows")
    "wv" 'evil-window-vsplit
    "wa" 'ace-window
    "wo" 'delete-other-windows
    "wc" 'ace-delete-window
    "ws" 'ace-swap-window)
#+END_SRC

** code
#+BEGIN_SRC emacs-lisp
  (my-leader-def
    :states '(normal visual insert emacs)
    "c" '(:ignore t :which-key "code")
    "cc" 'comment-or-uncomment-region)
#+END_SRC

** lisp
#+BEGIN_SRC emacs-lisp
  (my-leader-def
     :states '(normal visual insert emacs)
     "l" '(:ignore t :which-key "lisp")
     "ll" 'eval-last-sexp
     "lb" 'eval-buffer
     )
#+END_SRC
 
* tools
** dired
*** dired+
#+BEGIN_SRC emacs-lisp
  ;; (use-package dired+
  ;;   :ensure t
  ;;   :config
  ;;   (require 'dired+))
#+END_SRC

*** peep
#+BEGIN_SRC emacs-lisp
  (use-package peep-dired
    :ensure t
    :defer t)
#+END_SRC

** hydra
 #+BEGIN_SRC emacs-lisp
   (use-package hydra
     :ensure t)
 #+END_SRC

** diminish
 #+BEGIN_SRC emacs-lisp
   (use-package diminish
     :ensure t)
 #+END_SRC

** try
 #+BEGIN_SRC emacs-lisp
   (use-package try
     :commands (try)
     :ensure t)
 #+END_SRC

** which-key
 #+BEGIN_SRC emacs-lisp
   (use-package which-key
     :ensure t
     :diminish which-key-mode 
     :config
     (which-key-mode)
     (setq which-key-idle-delay 1
	   which-key-show-operator-state-maps t)
     )
 #+END_SRC

** evil
*** Setup
 #+BEGIN_SRC emacs-lisp
   (use-package evil
     :ensure t
     :init
     (setq evil-want-keybinding nil)
     :config
     (evil-mode))
 #+END_SRC
*** Colletion 
#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :ensure t
    :custom (evil-collection-company-setup nil)
    :config
    (evil-collection-init
     '(elfeed
       dired
       ibuffer
       image
       ivy
       flycheck
       hungry-delete
       omnisharp
       which-key)))
#+END_SRC

*** Other
    Normal state as default

 #+BEGIN_SRC emacs-lisp
   (setq evil-emacs-state-modes nil)
   ;; don't put into normal mode in REPL (setq evil-insert-state-modes nil)
   (setq evil-motion-state-modes nil)
   (setq evil-normal-state-cursor '(box "#c792ea")
         evil-insert-state-cursor '((bar . 2) "#c792ea")
         evil-visual-state-cursor '(box "yellow")
         evil-emacs-state-cursor '((bar . 4) "#6785c6")
         evil-replace-state-cursor '(hbar "orange"))
 #+END_SRC

** counsel/swiper/ivy
*** Counsel
 #+BEGIN_SRC emacs-lisp
   (use-package counsel
     :diminish (ivy-mode counsel-mode)
     :ensure t
     :config
     (ivy-mode)
     (counsel-mode)
     (setq ivy-height 20)
     (setq ivy-count-format "[%d/%d]")
     (setq ivy-use-virtual-buffers t)
     (setq enable-recursive-minibuffers t)
     (setq search-default-mode #'char-fold-to-regexp))
   (global-set-key (kbd "C-c C-r") 'ivy-resume)
   (global-set-key (kbd "<f6>") 'ivy-resume)
   (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
   (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
   (global-set-key (kbd "C-c g") 'counsel-git)
   (global-set-key (kbd "C-c j") 'counsel-git-grep)
   (global-set-key (kbd "C-c k") 'counsel-ag)
   (global-set-key (kbd "C-x l") 'counsel-locate)
   (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
   (define-key minibuffer-local-map
     (kbd "C-r") 'counsel-minibuffer-history)
   (use-package swiper
     :ensure t)
 #+END_SRC

*** Prescient (recently used ivy)
 #+BEGIN_SRC emacs-lisp
   (use-package ivy-prescient
     :after counsel
     :ensure t
     :config
     (setq ivy-prescient-retain-classic-highlighting t)
     (prescient-persist-mode)
     (ivy-prescient-mode))
 #+END_SRC

*** ivy-rich
#+BEGIN_SRC emacs-lisp
  ;; (use-package ivy-rich
  ;;   :ensure t)
#+END_SRC

** IBuffer
#+BEGIN_SRC emacs-lisp
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("dired" (mode . dired-mode))
                 ("org" (name . "^.*org$"))

                 ("web" (or (mode . web-mode) (mode . js2-mode)))
                 ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
                 ("mu4e" (name . "\*mu4e\*"))
                 ("programming" (or
                                 (mode . python-mode)
                                 (mode . c++-mode)
                                 (mode . clojure-mode)
                                 (mode . csharp-mode)
                                 (mode . haskell-mode)))
                 ("emacs" (or
                           (name . "^\\*scratch\\*$")
                           (name . "^\\*Messages\\*$")))))))

  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-auto-mode)
              (ibuffer-switch-to-saved-filter-groups "default")))

  ;; don't show these
  ;(add-to-list 'ibuffer-never-show-predicates "zowie")
  ;; Don't show filter groups if there are no buffers in that group
  (setq ibuffer-show-empty-filter-groups nil)

  ;; Don't ask for confirmation to delete marked buffers
  (setq ibuffer-expert t)
#+END_SRC

** ace window
 #+BEGIN_SRC emacs-lisp
   (use-package ace-window
     :ensure t
     :commands (ace-window ace-delete-window ace-swap-window)
     :init
     (progn
       (global-set-key [remap other-window] 'ace-window)
       (custom-set-faces
	'(aw-leading-char-face
	  ((t (:inherit ace-jump-face-foreground :height 3.0)))))))
   (setq aw-keys '(?a ?o ?e ?u ?i ?d ?h ?t ?n ?s))
 #+END_SRC

** avy
 #+BEGIN_SRC emacs-lisp
   (use-package avy
     :commands avy-goto-char-timer
     :ensure t
     )
 #+END_SRC

** projectile
*** setup
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-global-mode)
    (setq projectile-completion-system 'ivy))
#+END_SRC

*** counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :ensure t
    :config
    (counsel-projectile-mode))
#+END_SRC

** dumb-jump
#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :ensure t
    :config
    (dumb-jump-mode)
    (setq dumb-jump-selector 'ivy))
#+END_SRC

** persp-mode
#+BEGIN_SRC emacs-lisp
  (use-package persp-mode
    :ensure t
    :config
    (persp-mode))
    ;; (setq persp-auto-resume-time -1))
#+END_SRC

** tabbar
 #+BEGIN_SRC emacs-lisp
 ;; (use-package tabbar
 ;;   :ensure t
 ;;   :config
 ;;   (tabbar-mode 1))
 #+END_SRC

** hungry-delete
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :diminish hungry-delete-mode
    :config
    (global-hungry-delete-mode))
#+END_SRC

** expand-region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t)
#+END_SRC

** rainbow-delimiter
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'cider-repl-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

** iedit
#+BEGIN_SRC emacs-lisp
  (use-package iedit
    :ensure t)
#+END_SRC

** beacon
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :diminish beacon-mode
    :config
    (beacon-mode))
#+END_SRC

* languages
** Tools
*** flycheck
  #+begin_src emacs-lisp
    (use-package flycheck
      :ensure t
      :config
      (global-flycheck-mode))
    (use-package flycheck-pos-tip
      :ensure t
      :after flycheck)
  #+end_src

*** Completion
**** company
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :ensure t
       :diminish company-mode
       :config
       (setq company-idle-delay 0.2)
       (setq company-minimum-prefix-length 1)
       (setq company-require-match nil)
       (add-to-list 'company-backends 'company-omnisharp)
       ;;(add-to-list 'company-backends #'company-tabnine)
       (add-hook 'after-init-hook 'global-company-mode))
   #+END_SRC

***** quickhelp 
   #+begin_src emacs-lisp
     (use-package company-quickhelp
       :ensure t
       :config 
       (company-quickhelp-mode))
   #+end_src

***** box
#+BEGIN_SRC emacs-lisp
  (use-package company-box
    :diminish company-box-mode
    :ensure t
    :hook (company-mode . company-box-mode))
#+END_SRC

***** statistics
#+BEGIN_SRC emacs-lisp
  (use-package company-statistics
    :ensure t
    :config
    (add-hook 'after-init-hook 'company-statistics-mode))
#+END_SRC

**** autocomplete
  #+begin_src emacs-lisp
    ;; (use-package auto-complete
    ;;   :ensure t
    ;;   :init
    ;;   (progn
    ;;     (ac-config-default)
    ;;     (global-auto-complete-mode))
  #+end_src
*** Yasnippets
**** setup
 #+begin_src emacs-lisp
   (use-package yasnippet
     :ensure t
     :config
     (yas-global-mode))
 #+end_src

**** snippets
 #+begin_src emacs-lisp
   (use-package yasnippet-snippets
     :ensure t)
 #+end_src

*** agressive-indent
#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :ensure t
    :config
    (add-hook 'csharp-mode-hook #'aggressive-indent-mode)
    (add-hook 'python-mode-hook #'aggressive-indent-mode))
  ;; (add-to-list 'aggressive-indent-excluded-modes 'html-mode))
#+END_SRC

*** paredit
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :ensure t)
#+END_SRC

*** parinfer
 #+BEGIN_SRC emacs-lisp
   (use-package parinfer
     :ensure t
     :bind
     (("C-," . parinfer-toggle-mode))
     :init
     (progn
       (setq parinfer-extensions
	     '(defaults       ; should be included.
		pretty-parens  ; different paren styles for different modes.
		evil           ; If you use Evil.
		;;lispy          ; If you use Lispy. With this extension, you should install Lispy and do not enable lispy-mode directly.
		paredit        ; Introduce some paredit commands.
		smart-tab      ; C-b & C-f jump positions and smart shift with tab & S-tab.
		smart-yank))   ; Yank behavior depend on mode.
       (add-hook 'clojure-mode-hook #'parinfer-mode)
       (add-hook 'emacs-lisp-mode-hook #'parinfer-mode)
       (add-hook 'common-lisp-mode-hook #'parinfer-mode)
       (add-hook 'scheme-mode-hook #'parinfer-mode)
       (add-hook 'lisp-mode-hook #'parinfer-mode)))

 #+END_SRC
** C#
*** setup
#+BEGIN_SRC emacs-lisp
  (use-package omnisharp
    :ensure t
    :config
    (add-hook 'csharp-mode-hook 'omnisharp-mode)
    (add-hook 'csharp-mode-hook #'company-mode)
    (add-hook 'csharp-mode-hook #'flycheck-mode))
#+END_SRC

*** repl
#+BEGIN_SRC emacs-lisp
  (defun my-csharp-repl ()
      "Switch to the CSharpRepl buffer, creating it if necessary."
      (interactive)
      (if-let ((buf (get-buffer "*CSharpRepl*")))
	  (pop-to-buffer buf)
	(when-let ((b (make-comint "CSharpRepl" "csharp")))
	  (switch-to-buffer-other-window b))))
  ;; (define-key csharp-mode-map (kbd "C-c C-z") 'my-csharp-repl)
#+END_SRC

** Clojure
*** Cider
#+BEGIN_SRC emacs-lisp
  (use-package cider
    :ensure t
    :config
    (setq
     cider-repl-history-file ".cider-repl-history"  ;; not squiggly-related, but I like it
     nrepl-log-messages t)                          ;; not necessary, but useful for trouble-shooting
    (add-hook 'cider-repl-mode-hook #'paredit-mode))
#+END_SRC

*** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-clj-kondo
    :ensure t
    :config
    (eval-after-load 'flycheck
      '(setq flycheck-display-errors-function
             #'flycheck-pos-tip-error-messages)))
#+END_SRC

*** hydra
#+BEGIN_SRC emacs-lisp
  (use-package cider-hydra
    :ensure t
    :config
    (add-hook 'clojure-mode #'cider-hydra-mode))
#+END_SRC

** Python
#+begin_src emacs-lisp
  (use-package jedi
    :ensure t
    :init
    (add-hook 'python-mode-hook 'jedi:setup)
    (add-hook 'python-mode-hook 'jedi:ac-setup))
#+end_src

** Org
*** Setup
#+BEGIN_SRC emacs-lisp
  (custom-set-variables
   '(org-directory "~/Files/Org")
   '(org-startup-folded 'overview)
   '(org-startup-indented t))
  (setq org-file-apps
        (append
         '(("\\.pdf\\'" . "zathura %s"))
         org-file-apps))
  (setq org-agenda-files
        '("~/Files/Org/gcal.org"
          "~/Files/Org/i.org"))
#+END_SRC

*** Bullets
 #+BEGIN_SRC emacs-lisp
   (use-package org-bullets
     :ensure t
     :init
     (setq org-bullets-bullet-list
	   '("▶" "✚" "●" "◆" "◇"))
     :config
     (add-hook 'org-mode-hook #'org-bullets-mode))
 #+END_SRC

** Haskell
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :ensure t)
#+END_SRC

** C++
#+BEGIN_SRC emacs-lisp
  (use-package ggtags
    :ensure t
    :config
    (add-hook 'c-mode-common-hook
              (lambda ()
                (when
                    (derived-mode-p 'c-mode 'c++-mode 'java-mode)
                  (ggtags-mode 1)))))

#+END_SRC

* UI
** all-the-icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t)
#+END_SRC

** Themes
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	  doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-palenight t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)

    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
    (doom-themes-treemacs-config)

    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+END_SRC

** Modeline
*** doom-modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode)
    :config
    (setq doom-modeline-minor-modes t)
    (setq doom-modeline-buffer-encoding nil)
    (column-number-mode))
#+END_SRC

*** powerline
#+begin_src emacs-lisp
  ;; (use-package powerline
  ;;   :ensure t
  ;;   :config
  ;;   (powerline-default-theme))
#+end_src

** Font 
#+begin_src emacs-lisp
  (use-package fira-code-mode
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'fira-code-mode))
    ;; (global-fira-code-mode))
#+end_src
   
** dashboard
#+BEGIN_SRC emacs-lisp
  ;; (use-package dashboard
  ;;   :ensure t
  ;;   :config
  ;;   (dashboard-setup-startup-hook)
  ;;   (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))))
#+END_SRC

* Other
** elfeed
*** setup
    #+BEGIN_SRC emacs-lisp
      (use-package elfeed
        :ensure t)
      (setq elfeed-db-directory "~/Files/elfeedDB")
      ;; (defface important-elfeed-entry
      ;;   '((t :foreground "#f77"))
      ;;   "Marks an important Elfeed entry.")
      ;; (push '(important important-elfeed-entry)
      ;;       elfeed-search-face-alist)
    #+END_SRC

*** org
    #+BEGIN_SRC emacs-lisp
      (use-package elfeed-org
        :ensure t
        :config
        (elfeed-org)
        (setq rmh-elfeed-org-files (list "~/Files/Org/elfeed.org")))
    #+END_SRC

*** goodies
#+BEGIN_SRC emacs-lisp
  (use-package elfeed-goodies
    :ensure t
    :config
    (elfeed-goodies/setup))
#+END_SRC
